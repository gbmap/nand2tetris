// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

//
// FINAL BOSS
//

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    // preset x
    Mux16(a=x, sel=zx, out=oZx);
    Not16(in=oZx, out=nozX);
    Mux16(a=oZx, b=nozX, sel=nx, out=x0);

    // preset y
    Mux16(a=y, sel=zy, out=oZy);
    Not16(in=oZy, out=nozY);
    Mux16(a=oZy, b=nozY, sel=ny, out=y0);

    // + or &
    Add16(a=x0, b=y0, out=xPy);
    And16(a=x0, b=y0, out=xAy);
    Mux16(a=xAy, b=xPy, sel=f, out=f0);

    // postsetting
    Not16(in=f0, out=nf0);
    Mux16(a=f0, b=nf0, sel=no, out=out, out[0..7]=psOut0, out[8..15]=psOut1, out[15]=lb);

    // zr
    Or8Way(in=psOut0, out=diff0);
    Or8Way(in=psOut1, out=diff1);
    Or(a=diff0, b=diff1, out=nzr);
    Not(in=nzr, out=zr);

    // ng
    Not(in=lb, out=nlb);
    Or(a=lb, b=nlb, out=b1);
    And(a=lb,b=b1,out=ng);
}